name: Build WSA
on:
  workflow_dispatch:
    inputs:
      arch:
        description: "Build arch"
        required: true
        default: "x64 & arm64"
        type: choice
        options:
          - x64
          - arm64
          - x64 & arm64
      release_type:
        description: "WSA release type"
        required: true
        default: "retail"
        type: choice
        options:
          - retail
          - release preview
          - insider slow
          - insider fast
      magisk_apk:
        description: "Magisk version"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - beta
          - canary
          - debug
      gapps_variant:
        description: "Variants of gapps"
        required: true
        default: "none"
        type: choice
        options:
          - none
          - super
          - stock
          - full
          - mini
          - micro
          - nano
          - pico
          - tvstock
          - tvmini
      remove_amazon:
        description: "Remove Amazon AppStore"
        required: true
        default: "keep"
        type: choice
        options:
          - keep
          - remove
      root_sol:
        description: "Root solution"
        required: true
        default: "magisk"
        type: choice
        options:
          - magisk
          - none

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            let matrix = {};
            let arch = "${{ github.event.inputs.arch }}";
            switch (arch) {
              case "x64":
                matrix.arch = ["x64"];
                break;
              case "arm64":
                matrix.arch = ["arm64"];
                break;
              default:
                matrix.arch = ["x64", "arm64"];
                break;
            }
            core.setOutput("matrix", JSON.stringify(matrix));

  build:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set ARCH env variable
        run: echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Create archive from repository
        run: |
          tar -czvf repo.tar.gz .
          rm -rf * .git*

      - name: Restore repository archive
        run: tar -xzvf repo.tar.gz

      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y setools lzip wine winetricks patchelf
          winetricks msxml6

      - name: Download WSA
        shell: python
        env:
          ARCH: ${{ env.ARCH }}
        run: |
          import requests
          # ... (Your Python script using os.environ['ARCH'])

      - name: Download Magisk
        shell: python
        env:
          ARCH: ${{ env.ARCH }}
        run: |
          import urllib.request
          # ... (Your Python script using os.environ['ARCH'])

      - name: Download OpenGApps
        if: ${{ github.event.inputs.gapps_variant != 'none' }}
        shell: python
        env:
          ARCH: ${{ env.ARCH }}
        run: |
          import requests
          # ... (Your Python script using os.environ['ARCH'])

      - name: Extract GApps
        if: ${{ github.event.inputs.gapps_variant != 'none' }}
        run: |
          mkdir gapps
          unzip -p gapps.zip {Core,GApps}/*.lz 2>/dev/null | tar --lzip -C gapps -xf - -i --strip-components=2 --exclude='setupwizardtablet-x86_64' --exclude='packageinstallergoogle-all' --exclude='speech-common' --exclude='markup-lib-arm' --exclude='markup-lib-arm64' --exclude='markup-all' --exclude='setupwizarddefault-x86_64' --exclude='pixellauncher-all' --exclude='pixellauncher-common' || true

      - name: Expand images
        run: |
          e2fsck -yf ${{ env.ARCH }}/system_ext.img
          system_ext_size=$(( $(du -sB512 ${{ env.ARCH }}/system_ext.img | cut -f1) + 20000 ))
          resize2fs ${{ env.ARCH }}/system_ext.img "${system_ext_size}s"
          # ... (Rest of your expand images commands)

      - name: Mount images
        run: |
          sudo mkdir system
          sudo mount -o loop ${{ env.ARCH }}/system.img system
          sudo mount -o loop ${{ env.ARCH }}/vendor.img system/vendor
          sudo mount -o loop ${{ env.ARCH }}/product.img system/product
          sudo mount -o loop ${{ env.ARCH }}/system_ext.img system/system_ext

      - name: Remove Amazon AppStore
        if: ${{ github.event.inputs.remove_amazon == 'remove' }}
        run: |
          find system/product/{etc/permissions,etc/sysconfig,framework,priv-app} -name "*amazon*" -o -name "*venezia*" | sudo xargs rm -rf

      - name: Integrate Magisk
        if: ${{ github.event.inputs.root_sol == 'magisk' }}
        run: |
          sudo mkdir -p system/sbin
          # ... (Rest of your Magisk integration commands)

      - name: Merge Language Resources
        run: |
          cp ${{ env.ARCH }}/resources.pri pri/en-us.pri
          cp ${{ env.ARCH }}/AppxManifest.xml xml/en-us.xml
          # ... (Rest of your merge language resources commands)

      - name: Add extra packages
        run: |
          sudo tar --wildcards -xf repo.tar.gz --strip-component=2 '*/${{ env.ARCH }}/system/*'
          # ... (Rest of your add extra packages commands)

      - name: Integrate GApps
        if: ${{ github.event.inputs.gapps_variant != 'none' }}
        run: |
          sudo tar --wildcards -xf repo.tar.gz --strip-component=2 '*/${{ env.ARCH }}/gapps/*'
          # ... (Rest of your GApps integration commands)

      - name: Fix GApps prop
        if: ${{ github.event.inputs.gapps_variant != 'none' }}
        shell: python
        run: |
          from __future__ import annotations
          # ... (Rest of your fix GApps prop python script)

      - name: Umount images
        run: |
          sudo umount system/system_ext
          sudo umount system/product
          sudo umount system/vendor
          sudo umount system
          sudo find system -exec touch -amt 200901010000 {} \;
